//// 레퍼런스(reference)
//#include <iostream>
//using namespace std;
//
//// 참조자(레퍼런스)는 특정 변수의 실제 이름 대신 사용 가능한 이름(별칭)을 의미합니다.
//// 기존의 c언어에서는 변수에 대한 참조를 포인터(*)를 통해서 진행했으나
//// c++에서는 참조자를 통해 작업을 진행합니다.
//
//int main()
//{
//	int a = 10;
//	int* pa = &a;
//	// 언어의 포인터
//	// 자료형* 포인터변수명 = &변수명;
//	// *(Asterisk)는 주소 값을 실제 값으로 변경해주는 연산자로 사용됩니다.
//	// &(Ampersand)는 변수 앞에 작성해 해당 변수의 조소 값을 반환하는 연산자입니다.
//	// 기능 : 포인터 변수를 이용해 변수 a를 가리킵니다.
//	// 가리키는 이유 : 함수 등에서 전달받은 주소 값을 통해 실제 위치에 대한 값의 수정과 읽기가 가능해짐.
//
//	int& ra = a;
//	// c++의 참조자
//	// 자료형& 참조자명 = 변수명;
//	// &(Ampersand)는 자료형 앞에 작성해 참조자의 기능으로 사용됩니다.
//	// 기능 : 변수 a에 대한 참조를 진행합니다.
//	// 참조하는 이유 : 참조를 통해 참조당한 변수는 더이상 다른 변수를 참조할 수 없게 됩니다.(포인터보다 안정성이 높음)
//
//	// 포인터와 참조자는 기능적으로 같으나 차이점이 존재합니다.
//	// 참조자는 반드시 유효한 정보여야 합니다.(NULL 값에 대한 처리를 할 수 없습니다.)
//	// >> 이는 참조자를 사용했다는 것이 값이 반드시 존재함을 의미하는 뜻으로 해석됩니다.
//	
//	// 포인터는 어떤 변수를 참조하는 부분에서 객체가 없을 수도 있습니다.(NULL 값 허용)
//
//	// 결과)
//	// 둘 다 사용되는 개념으로, 특정 상황에 맞게 포인터나 참조자를 사용하면 됩니다.
//	// C++에서는 특수한 경우를 제외하곤 참조자를 사용하는 것을 권장하고 있습니다.
//
//	// 포인터를 사용해야 하는 이유
//	// 1. 하나의 변수를 가지고 여러 개의 객체를 바꾸어서 참조해야하는 경우
//	// 2. NULL 값이 표현 상 필요한 경우
//
//	// 참조자를 사용해야 하는 이유
//	// 1. 참조할 대상이 하나인 경우
//	// 2. 참조할 대상이 반드시 존재하는 경우(과정 상 종료 전까지 제거될 일이 없는 경우)
//
//
//
//
//	return 0;
//}